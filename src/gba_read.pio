; Program name
.program gba_read
.side_set 2 opt

.wrap_target
  MOV OSR, !NULL       
  OUT PINDIRS, 32      
  PULL                   side 0b11
  OUT NULL, 8            side 0b11
  OUT PINS, 24     [3]   side 0b11
  NOP              [3]   
  PULL             [1]
  MOV X, OSR       [3]   side 0b10
  OUT NULL, 32     [2]     

  MOV OSR, !NULL         side 0b00
  OUT NULL, 16         
  OUT PINDIRS, 32  [3] 

continue_read:
  IN PINS, 16          
  PUSH            [3]  side 0b10
  NOP                  
  NOP             [2]  side 0b00
  JMP X-- continue_read 
.wrap



% c-sdk {
#define PIN_AD0                  0
#define PIN_AD15                15
#define PIN_A16                 16
#define PIN_A23                 23

#define PIN_CS                  25
#define PIN_NRD                 26
#define PIN_NWR                 27
#define PIN_CLK                 28

static inline void gba_read_program_init(PIO pio, uint sm, uint offset) {
  pio_sm_config c = gba_read_program_get_default_config(offset);

  pio_sm_set_consecutive_pindirs(pio, sm, PIN_AD0, 29, true);  //address is out
  sm_config_set_out_pins(&c, PIN_AD0, 29);

  pio_sm_set_consecutive_pindirs(pio, sm, PIN_AD0, 16, false);  //data is in
  sm_config_set_in_pins(&c, PIN_AD0);

  pio_sm_set_set_pins(pio, sm, PIN_AD0, 16);  //we to switch data pins
  sm_config_set_set_pins(&c, PIN_AD0, 16);

  pio_sm_set_sideset_pins(pio, sm, 25);
  sm_config_set_sideset_pins(&c, 25);
  sm_config_set_sideset(&c, 3, true, false);

  float freq = 70; //MHz
  float div = (float)clock_get_hz(clk_sys) / (freq * 1e6);
  sm_config_set_clkdiv(&c, div);

  sm_config_set_in_shift(&c, false, false, 24);
  sm_config_set_out_shift(&c, false, false, 16);

  for (int i=0; i<24; i++){
    pio_gpio_init(pio, i);
  }

  for (int i=25; i<29; i++){
    pio_gpio_init(pio, i);
  }

  pio_sm_init(pio, sm, offset, &c);
}
%}